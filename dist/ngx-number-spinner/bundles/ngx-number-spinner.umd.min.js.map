{"version":3,"sources":["../../../projects/ngx-number-spinner/src/lib/ngx-number-spinner/ngx-number-spinner.component.ts","../../../projects/ngx-number-spinner/src/lib/ngx-number-spinner/ngx-number-spinner.component.html","../../../projects/ngx-number-spinner/src/lib/ngx-number-spinner.module.ts"],"names":["NgxNumberSpinnerComponent","this","value","step","direction","change","EventEmitter","_propagateChange","prototype","writeValue","registerOnChange","fn","registerOnTouched","_onTouched","setDisabledState","isDisabled","disabled","inc","_onChange","dec","emit","selectors","inputs","min","max","outputs","features","i0","ɵɵProvidersFeature","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","vars","consts","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵnamespaceSVG","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵnamespaceHTML","i0.ɵɵtext","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵclassProp","i0.ɵɵtextInterpolate","NgxNumberSpinnerModule","imports","CommonModule","declarations","exports"],"mappings":"seA+BE,SAAAA,IAbgBC,KAAAC,MAAgB,EACjBD,KAAAE,KAAe,EAGVF,KAAAG,UAAqC,aAEvCH,KAAAI,OAA+B,IAAIC,EAAAA,aAIrDL,KAAAM,iBAAuB,oBAKvBP,EAAAQ,UAAAC,WAAA,SAAWP,GACTD,KAAKC,MAAQA,GAAS,GAGxBF,EAAAQ,UAAAE,iBAAA,SAAiBC,GACfV,KAAKM,iBAAmBI,GAG1BX,EAAAQ,UAAAI,kBAAA,SAAkBD,GAChBV,KAAKY,WAAaF,GAGpBX,EAAAQ,UAAAM,iBAAA,SAAkBC,GAChBd,KAAKe,SAAWD,GAGlBf,EAAAQ,UAAAS,IAAA,WACEhB,KAAKC,OAASD,KAAKE,KACnBF,KAAKiB,aAGPlB,EAAAQ,UAAAW,IAAA,WACElB,KAAKC,OAASD,KAAKE,KAEnBF,KAAKiB,aAGClB,EAAAQ,UAAAU,UAAA,WACNjB,KAAKM,iBAAiBN,KAAKC,OAE3BD,KAAKI,OAAOe,KAAKnB,KAAKC,8CA9CbF,qCAAAA,EAAyBqB,UAAA,CAAA,CAAA,uBAAAC,OAAA,CAAApB,MAAA,QAAAC,KAAA,OAAAoB,IAAA,MAAAC,IAAA,MAAApB,UAAA,aAAAqB,QAAA,CAAApB,OAAA,UAAAqB,SAAA,CAAAC,EAAAC,mBARzB,CACT,CACEC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAhC,KAC9BiC,OAAO,MAEVC,MAAA,GAAAC,KAAA,GAAAC,OAAA,CAAA,CAAA,EAAA,UAAA,EAAA,WAAA,CAAA,OAAA,SAAA,EAAA,WAAA,SAAA,CAAA,QAAA,6BAAA,QAAA,KAAA,SAAA,KAAA,UAAA,aAAA,CAAA,IAAA,qBAAA,CAAA,IAAA,gBAAA,OAAA,QAAA,CAAA,IAAA,wCAAAC,SAAA,SAAAC,EAAAC,SCfHC,EAAAA,eAAAA,EAAAA,MAAAA,GAEIA,EAAAA,eAAAA,EAAAA,SAAAA,GAEQC,EAAAA,WAAAA,SAAAA,WAAAA,OAASF,EAAApB,SAEbuB,EAAAA,iBAAAF,EAAAA,eAAAA,EAAAA,MAAAA,GACEG,EAAAA,UAAAA,EAAAA,OAAAA,GAA6BA,EAAAA,UAAAA,EAAAA,OAAAA,GAC/BC,EAAAA,eACJA,EAAAA,eAEAC,EAAAA,kBAAAL,EAAAA,eAAAA,EAAAA,OAAKM,EAAAA,OAAAA,GAAWF,EAAAA,eAEhBJ,EAAAA,eAAAA,EAAAA,SAAAA,GAEQC,EAAAA,WAAAA,SAAAA,WAAAA,OAASF,EAAAtB,SAEbyB,EAAAA,iBAAAF,EAAAA,eAAAA,EAAAA,MAAAA,GACEG,EAAAA,UAAAA,EAAAA,OAAAA,GAA+CA,EAAAA,UAAAA,GAAAA,OAAAA,GACjDC,EAAAA,eACJA,EAAAA,eACJA,EAAAA,sBApBKG,EAAAA,WAAAA,UAAAA,EAAAA,gBAAAA,EAAAA,EAAAA,eAAAA,EAAAA,UAAAA,aAAAA,EAAAA,YAEOC,EAAAA,UAAAA,GAAAC,EAAAA,YAAAA,UAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,KAEAF,EAAAA,WAAAA,WAAAA,EAAAA,OAAAA,EAAAA,KAMHC,EAAAA,UAAAA,GAAAE,EAAAA,kBAAAA,EAAAA,OAGGF,EAAAA,UAAAA,GAAAC,EAAAA,YAAAA,UAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,KAEAF,EAAAA,WAAAA,WAAAA,EAAAA,OAAAA,EAAAA,ymECCZ,6CAAaI,iEAAAA,IAAsBC,QAAA,CAJxB,CACPC,EAAAA,kFAGSF,EAAsB,CAAAG,aAAA,CAT/BtD,GAAyBoD,QAAA,CAMzBC,EAAAA,cAAYE,QAAA,CAHZvD","sourcesContent":["import { Component, Input, EventEmitter, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector:    'ngx-number-spinner',\n  templateUrl: './ngx-number-spinner.component.html',\n  styleUrls: [\n    './ngx-number-spinner.component.scss'\n  ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxNumberSpinnerComponent),\n      multi: true\n    }\n  ]\n})\nexport class NgxNumberSpinnerComponent implements ControlValueAccessor {\n  @Input('value') value: number = 0;\n  @Input('step') step: number = 1;\n  @Input('min') min: number;\n  @Input('max') max: number;\n  @Input('direction') direction: 'horizontal'|'vertical' = 'horizontal';\n\n  @Output('change') change: EventEmitter<number> = new EventEmitter();\n\n  disabled: boolean;\n\n  _propagateChange:any = () => {};\n  _onTouched: () => void;\n\n  constructor() { }\n\n  writeValue(value:number):void {\n    this.value = value || 0;\n  }\n\n  registerOnChange(fn:any):void {\n    this._propagateChange = fn;\n  }\n\n  registerOnTouched(fn:any):void {\n    this._onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled:boolean):void {\n    this.disabled = isDisabled;\n  }\n\n  inc():void {\n    this.value += this.step;\n    this._onChange();\n  }\n\n  dec():void {\n    this.value -= this.step;\n\n    this._onChange();\n  }\n\n  private _onChange():void {\n    this._propagateChange(this.value);\n\n    this.change.emit(this.value);\n  }\n}\n","<div class=\"wrapper\"\n     [ngClass]=\"{ 'horizontal-wrapper': direction === 'horizontal', 'vertical-wrapper': direction === 'vertical' }\">\n    <button type=\"button\"\n            [class.ripple]=\"!min || value > min\"\n            (click)=\"dec()\"\n            [disabled]=\"value <= min\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n          <path d=\"M19 13H5v-2h14v2z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        </svg>\n    </button>\n\n    <div>{{ value }}</div>\n\n    <button type=\"button\"\n            [class.ripple]=\"!max || value < max\"\n            (click)=\"inc()\"\n            [disabled]=\"value >= max\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n          <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        </svg>\n    </button>\n</div>\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { NgxNumberSpinnerComponent } from './ngx-number-spinner/ngx-number-spinner.component';\n\n@NgModule({\n  declarations: [\n    NgxNumberSpinnerComponent\n  ],\n  exports: [\n    NgxNumberSpinnerComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class NgxNumberSpinnerModule { }\n"]}