{"ast":null,"code":"import _classCallCheck from \"/Users/jrquick/development/encounting/ngx-number-spinner/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jrquick/development/encounting/ngx-number-spinner/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter, Component, forwardRef, Input, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-number-spinner/ngx-number-spinner.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nvar NgxNumberSpinnerComponent = /*#__PURE__*/function () {\n  function NgxNumberSpinnerComponent() {\n    _classCallCheck(this, NgxNumberSpinnerComponent);\n\n    this.value = 0;\n    this.step = 1;\n    this.direction = 'horizontal';\n    this.change = new EventEmitter();\n\n    this._propagateChange =\n    /**\n    * @return {?}\n    */\n    function () {};\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _createClass(NgxNumberSpinnerComponent, [{\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value || 0;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._propagateChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"inc\",\n    value: function inc() {\n      this.value += this.step;\n\n      this._onChange();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"dec\",\n    value: function dec() {\n      this.value -= this.step;\n\n      this._onChange();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onChange\",\n    value: function _onChange() {\n      this._propagateChange(this.value);\n\n      this.change.emit(this.value);\n    }\n  }]);\n\n  return NgxNumberSpinnerComponent;\n}();\n\nNgxNumberSpinnerComponent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'ngx-number-spinner',\n    template: \"<div class=\\\"wrapper\\\"\\n     [ngClass]=\\\"{ 'horizontal-wrapper': direction === 'horizontal', 'vertical-wrapper': direction === 'vertical' }\\\">\\n    <button type=\\\"button\\\"\\n            [class.ripple]=\\\"!min || value > min\\\"\\n            (click)=\\\"dec()\\\"\\n            [disabled]=\\\"value <= min\\\">\\n        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n          <path d=\\\"M19 13H5v-2h14v2z\\\"/><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/>\\n        </svg>\\n    </button>\\n\\n    <div>{{ value }}</div>\\n\\n    <button type=\\\"button\\\"\\n            [class.ripple]=\\\"!max || value < max\\\"\\n            (click)=\\\"inc()\\\"\\n            [disabled]=\\\"value >= max\\\">\\n        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n          <path d=\\\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\\\"/><path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/>\\n        </svg>\\n    </button>\\n</div>\\n\",\n    providers: [{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(\n      /**\n      * @return {?}\n      */\n      function () {\n        return NgxNumberSpinnerComponent;\n      }),\n      multi: true\n    }],\n    styles: [\"input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.wrapper{max-width:200px}.wrapper button{padding:.5rem;overflow:hidden;border:0}.wrapper button:focus{outline:0}.wrapper button:disabled{cursor:not-allowed}.wrapper button:disabled svg{fill:rgba(0,0,0,.26)}.wrapper div{-webkit-box-align:center;align-items:center;padding:0 .5rem;font-size:1rem;-webkit-box-flex:1;flex:1;min-width:30px;text-align:center;vertical-align:unset}.horizontal-wrapper{display:-webkit-box;display:flex;border:1px solid rgba(0,0,0,.12);-webkit-box-pack:justify;justify-content:space-between;border-radius:8px}.horizontal-wrapper button:first-child{border-top-left-radius:7px;border-bottom-left-radius:7px}.horizontal-wrapper button:last-child{border-top-right-radius:7px;border-bottom-right-radius:7px}.horizontal-wrapper div{display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;border-left:1px solid rgba(0,0,0,.12);border-right:1px solid rgba(0,0,0,.12)}.vertical-wrapper button:first-child{border:1px solid rgba(0,0,0,.12);border-radius:10px 10px 0 0;width:100%}.vertical-wrapper button:last-child{border:1px solid rgba(0,0,0,.12);border-radius:0 0 10px 10px;width:100%}.vertical-wrapper div{border-left:1px solid rgba(0,0,0,.12);border-right:1px solid rgba(0,0,0,.12);padding:.5rem}.ripple{background-position:center;-webkit-transition:background .3s;transition:background .3s}.ripple:hover{cursor:pointer;background:radial-gradient(circle,transparent 1%,rgba(0,0,0,.12) 1%) center/15000% rgba(0,0,0,.12)}.ripple:active{background-color:rgba(0,0,0,.12);background-size:100%;-webkit-transition:background;transition:background}\"]\n  }]\n}];\n/** @nocollapse */\n\nNgxNumberSpinnerComponent.ctorParameters = function () {\n  return [];\n};\n\nNgxNumberSpinnerComponent.propDecorators = {\n  value: [{\n    type: Input,\n    args: ['value']\n  }],\n  step: [{\n    type: Input,\n    args: ['step']\n  }],\n  min: [{\n    type: Input,\n    args: ['min']\n  }],\n  max: [{\n    type: Input,\n    args: ['max']\n  }],\n  direction: [{\n    type: Input,\n    args: ['direction']\n  }],\n  change: [{\n    type: Output,\n    args: ['change']\n  }]\n};\n\nif (false) {\n  /** @type {?} */\n  NgxNumberSpinnerComponent.prototype.value;\n  /** @type {?} */\n\n  NgxNumberSpinnerComponent.prototype.step;\n  /** @type {?} */\n\n  NgxNumberSpinnerComponent.prototype.min;\n  /** @type {?} */\n\n  NgxNumberSpinnerComponent.prototype.max;\n  /** @type {?} */\n\n  NgxNumberSpinnerComponent.prototype.direction;\n  /** @type {?} */\n\n  NgxNumberSpinnerComponent.prototype.change;\n  /** @type {?} */\n\n  NgxNumberSpinnerComponent.prototype.disabled;\n  /** @type {?} */\n\n  NgxNumberSpinnerComponent.prototype._propagateChange;\n  /** @type {?} */\n\n  NgxNumberSpinnerComponent.prototype._onTouched;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/ngx-number-spinner.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NgxNumberSpinnerModule = function NgxNumberSpinnerModule() {\n  _classCallCheck(this, NgxNumberSpinnerModule);\n};\n\nNgxNumberSpinnerModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [NgxNumberSpinnerComponent],\n    exports: [NgxNumberSpinnerComponent],\n    imports: [CommonModule]\n  }]\n}];\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-number-spinner.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NgxNumberSpinnerComponent, NgxNumberSpinnerModule };","map":{"version":3,"sources":["ng://ngx-number-spinner/lib/ngx-number-spinner/ngx-number-spinner.component.ts","ng://ngx-number-spinner/lib/ngx-number-spinner.module.ts"],"names":[],"mappings":";;;;;;;;;;;IAiBa,yB;AAcX,uCAAA;AAAA;;AAbgB,SAAA,KAAA,GAAgB,CAAhB;AACD,SAAA,IAAA,GAAe,CAAf;AAGK,SAAA,SAAA,GAAqC,YAArC;AAEF,SAAA,MAAA,GAA+B,IAAI,YAAJ,EAA/B;;AAIlB,SAAA,gBAAA;AAAgB;;;AAAO,gBAAA,CAAQ,CAA/B;AAGiB;;;;;;;;;+BAEN,K,EAAY;AACrB,WAAK,KAAL,GAAa,KAAK,IAAI,CAAtB;AACD;;;;;;;;qCAEgB,E,EAAM;AACrB,WAAK,gBAAL,GAAwB,EAAxB;AACD;;;;;;;;sCAEiB,E,EAAM;AACtB,WAAK,UAAL,GAAkB,EAAlB;AACD;;;;;;;;qCAEiB,U,EAAkB;AAClC,WAAK,QAAL,GAAgB,UAAhB;AACD;;;;;;;0BAEE;AACD,WAAK,KAAL,IAAc,KAAK,IAAnB;;AACA,WAAK,SAAL;AACD;;;;;;;0BAEE;AACD,WAAK,KAAL,IAAc,KAAK,IAAnB;;AAEA,WAAK,SAAL;AACD;;;;;;;;gCAEgB;AACf,WAAK,gBAAL,CAAsB,KAAK,KAA3B;;AAEA,WAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,KAAtB;AACD;;;;;;;QA7DF,S;AAAS,EAAA,IAAA,EAAA,CAAC;AACT,IAAA,QAAQ,EAAK,oBADJ;AAET,IAAA,QAAA,EAAA,g7BAFS;AAMT,IAAA,SAAS,EAAE,CACT;AACE,MAAA,OAAO,EAAE,iBADX;AAEE,MAAA,WAAW,EAAE,UAAU;AAAA;;;AAAC;AAAA,eAAM,yBAAN;AAAA,OAAD,CAFzB;AAGE,MAAA,KAAK,EAAE;AAHT,KADS,CANF;;AAAA,GAAD;;;;;;;;;;UAeP,K;AAAK,IAAA,IAAA,EAAA,CAAC,OAAD;;;UACL,K;AAAK,IAAA,IAAA,EAAA,CAAC,MAAD;;;UACL,K;AAAK,IAAA,IAAA,EAAA,CAAC,KAAD;;;UACL,K;AAAK,IAAA,IAAA,EAAA,CAAC,KAAD;;;UACL,K;AAAK,IAAA,IAAA,EAAA,CAAC,WAAD;;;UAEL,M;AAAM,IAAA,IAAA,EAAA,CAAC,QAAD;;;;;;AANP,EAAA,yBAAA,CAAA,SAAA,CAAA,KAAA;;;AACA,EAAA,yBAAA,CAAA,SAAA,CAAA,IAAA;;;AACA,EAAA,yBAAA,CAAA,SAAA,CAAA,GAAA;;;AACA,EAAA,yBAAA,CAAA,SAAA,CAAA,GAAA;;;AACA,EAAA,yBAAA,CAAA,SAAA,CAAA,SAAA;;;AAEA,EAAA,yBAAA,CAAA,SAAA,CAAA,MAAA;;;AAEA,EAAA,yBAAA,CAAA,SAAA,CAAA,QAAA;;;AAEA,EAAA,yBAAA,CAAA,SAAA,CAAA,gBAAA;;;AACA,EAAA,yBAAA,CAAA,SAAA,CAAA,UAAA;;;;;;;;;ICZW,sB;;;;;QAXZ,Q;AAAQ,EAAA,IAAA,EAAA,CAAC;AACR,IAAA,YAAY,EAAE,CACZ,yBADY,CADN;AAIR,IAAA,OAAO,EAAE,CACP,yBADO,CAJD;AAOR,IAAA,OAAO,EAAE,CACP,YADO;AAPD,GAAD","sourcesContent":["import { Component, Input, EventEmitter, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector:    'ngx-number-spinner',\n  templateUrl: './ngx-number-spinner.component.html',\n  styleUrls: [\n    './ngx-number-spinner.component.scss'\n  ],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxNumberSpinnerComponent),\n      multi: true\n    }\n  ]\n})\nexport class NgxNumberSpinnerComponent implements ControlValueAccessor {\n  @Input('value') value: number = 0;\n  @Input('step') step: number = 1;\n  @Input('min') min: number;\n  @Input('max') max: number;\n  @Input('direction') direction: 'horizontal'|'vertical' = 'horizontal';\n\n  @Output('change') change: EventEmitter<number> = new EventEmitter();\n\n  disabled: boolean;\n\n  _propagateChange:any = () => {};\n  _onTouched: () => void;\n\n  constructor() { }\n\n  writeValue(value:number):void {\n    this.value = value || 0;\n  }\n\n  registerOnChange(fn:any):void {\n    this._propagateChange = fn;\n  }\n\n  registerOnTouched(fn:any):void {\n    this._onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled:boolean):void {\n    this.disabled = isDisabled;\n  }\n\n  inc():void {\n    this.value += this.step;\n    this._onChange();\n  }\n\n  dec():void {\n    this.value -= this.step;\n\n    this._onChange();\n  }\n\n  private _onChange():void {\n    this._propagateChange(this.value);\n\n    this.change.emit(this.value);\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { NgxNumberSpinnerComponent } from './ngx-number-spinner/ngx-number-spinner.component';\n\n@NgModule({\n  declarations: [\n    NgxNumberSpinnerComponent\n  ],\n  exports: [\n    NgxNumberSpinnerComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class NgxNumberSpinnerModule { }\n"]},"metadata":{},"sourceType":"module"}